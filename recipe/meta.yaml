{% set version = "1.16.1" %}

# Update the numpy value here to the most recent released version
# when updating to a new scipy feature release; override default pins
{% set numpy = "2.3.0" %}
{% set numpy_minor = numpy.split(".")[1] | int %}

# ensure is_freethreading gets detected as a used variable
# [is_freethreading]

package:
  name: scipy-split
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/s/scipy/scipy-{{ version }}.tar.gz
  sha256: 44c76f9e8b6e8e488a586190ab38016e4ed2f8a038af7cd3defa903c0a2238b3

build:
  number: 1
  skip: true  # [py<311]

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - pybind11                               # [build_platform != target_platform]
    - meson-python                           # [build_platform != target_platform]
    - cmake                                  # [build_platform != target_platform]
    - ninja                                  # [build_platform != target_platform]
    - pkg-config                             # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ stdlib('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('fortran') }}
    # pythran code needs clang-cl on windows
    - clang                                  # [win]
  host:
    - libblas
    - libcblas
    - liblapack
    - python
    - cython
    - meson-python
    - ninja
    - pkg-config
    - python-build
    - pybind11
    - pythran
    - numpy
    - pip

# the top-level build.{sh,bat} builds scipy, and then
# build-output.{sh,bat} installs the files
outputs:
  - name: scipy
    script: build-output.sh   # [not win]
    script: build-output.bat  # [win]
    build:
      ignore_run_exports:     # [win]
        - libflang            # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        # only need these for the strong run exports
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
      host:
        - libblas
        - libcblas
        - liblapack
        - python
        - cython
        - meson-python
        - ninja
        - pkg-config
        - python-build
        - pybind11
        - pythran
        - numpy
        - pip
      run:
        - python
        # numpy's run-export only requires <3 because not every package
        # is exposed as deeply to its ABI. scipy however only supports
        # the two next minor versions after the numpy we build against, see
        # https://scipy.github.io/devdocs/dev/core-dev/index.html#version-ranges-for-numpy-and-other-dependencies
        - numpy <2.{{ numpy_minor + 3 }}
        # double-check lower bound from
        # https://github.com/scipy/scipy/blob/v{{ version }}/pyproject.toml#L55
        - numpy >=1.25.2
    test:
      requires:
        - pytest
        - hypothesis
      imports:
        - scipy
        # reference for public API is effectively
        # https://github.com/scipy/scipy/blob/main/scipy/_lib/tests/test_public_api.py
        - scipy.cluster
        - scipy.cluster.hierarchy
        - scipy.cluster.vq
        - scipy.constants
        - scipy.datasets
        - scipy.fft
        - scipy.fftpack
        - scipy.integrate
        - scipy.interpolate
        - scipy.io
        - scipy.io.arff
        - scipy.io.matlab
        - scipy.io.wavfile
        - scipy.linalg
        - scipy.linalg.blas
        - scipy.linalg.cython_blas
        - scipy.linalg.cython_lapack
        - scipy.linalg.interpolative
        - scipy.linalg.lapack
        - scipy.misc
        - scipy.ndimage
        - scipy.odr
        - scipy.optimize
        - scipy.signal
        - scipy.signal.windows
        - scipy.sparse
        - scipy.sparse.csgraph
        - scipy.sparse.linalg
        - scipy.spatial
        - scipy.spatial.distance
        - scipy.spatial.transform
        - scipy.special
        - scipy.stats
        - scipy.stats.contingency
        - scipy.stats.distributions
        - scipy.stats.mstats
        - scipy.stats.qmc
        - scipy.stats.sampling
      commands:
        # absence of tests (selection)
        {% set test_folders = [
            "_lib/tests", "cluster/tests", "constants/tests", "datasets/tests",
            "fftpack/tests", "fft/tests", "integrate/tests", "interpolate/tests",
            "io/tests", "linalg/tests", "misc/tests", "ndimage/tests", "odr/tests",
            "optimize/tests", "signal/tests", "sparse/tests", "spatial/tests",
            "special/tests", "stats/tests"
        ] %}
        {% for each_folder in test_folders %}
        - test ! -d $SP_DIR/scipy/{{ each_folder }}                               # [unix]
        - if exist %SP_DIR%\scipy\{{ "\\".join(each_folder.split("/")) }} exit 1  # [win]
        {% endfor %}

        # absence of testing DSOs (selection)
        {% set test_libraries = [
            "_lib/_test_ccallback", "integrate/_test_multivariate", "io/_test_fortran",
            "ndimage/_ctest", "ndimage/_cytest", "special/_test_internal"
        ] %}
        {% set PY_ABI = "cpython-" ~ PY_VER.replace(".", "") %}                         # [unix]
        {% set PY_ABI = "cp" ~ PY_VER.replace(".", "") %}                               # [win]
        {% set ARCH = "x86_64" if x86 else ("aarch64" if aarch64 else "powerpc64le")%}  # [linux]
        {% for each_lib in test_libraries %}
        - test ! -f $SP_DIR/scipy/{{ each_lib }}.{{ PY_ABI }}-{{ ARCH }}-linux-gnu.so                     # [linux]
        - test ! -f $SP_DIR/scipy/{{ each_lib }}.{{ PY_ABI }}-darwin.so                                   # [osx]
        - if exist %SP_DIR%\scipy\{{ "\\".join(each_lib.split("/")) }}.{{ PY_ABI }}-win_amd64.pyd exit 1  # [win]
        {% endfor %}

        # test that scipy.test raises an informative error
        - python -c "import scipy; throw_away_the_return_value = scipy.test()" > testlog
        - python -c "import sys; lines=open('testlog').readlines(); sys.exit(0 if any('conda-forge builds of' in x for x in lines) else 1)"
        # same for `pytest --pyargs scipy` (uses exit code that's neither 0 or 1 on win, which breaks piping)
        - (pytest --pyargs scipy || echo "failure was expected") > testlog   # [unix]
        - (pytest --pyargs scipy || if !ERRORLEVEL! neq 0 exit 0) > testlog  # [win]
        - python -c "import sys; lines=open('testlog').readlines(); sys.exit(0 if any('conda-forge builds of' in x for x in lines) else 1)"
        # ensure only one test is left (namely, our hint)
        - python -c "import sys; lines=open('testlog').readlines(); sys.exit(0 if any('======== 1 failed' in x for x in lines) else 1)"

  - name: scipy-tests
    script: build-output.sh   # [not win]
    script: build-output.bat  # [win]
    build:
      ignore_run_exports:     # [win]
        - libflang            # [win]
    requirements:
      build:
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - cython                                 # [build_platform != target_platform]
        - numpy                                  # [build_platform != target_platform]
        - pybind11                               # [build_platform != target_platform]
        - meson-python                           # [build_platform != target_platform]
        - cmake                                  # [build_platform != target_platform]
        - ninja                                  # [build_platform != target_platform]
        - pkg-config                             # [build_platform != target_platform]
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - clang                                  # [win]
        - sed                                    # [unix]
        - m2-sed                                 # [win]
      host:
        - {{ pin_subpackage('scipy', exact=True) }}
        - libblas
        - libcblas
        - liblapack
        - python
        - pip
        - cython
        - meson-python
        - ninja
        - pkg-config
        - python-build
        - pybind11
        - pythran
        - numpy
      run:
        - {{ pin_subpackage('scipy', exact=True) }}
        - python
        - pytest
        - hypothesis
        # needed for scipy.datasets
        - pooch
    test:
      requires:
        - pytest-timeout
        - pytest-xdist
        - mpmath
      commands:
        {% set tests_to_skip = "_not_a_real_test" %}
        # undiagnosed tolerance violations
        {% set tests_to_skip = tests_to_skip + " or test_log1mexp" %}                                     # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestBatch and (test_solve or test_lu_solve))" %}     # [win]
        # scipy/scipy#19210 - 60 failing tests!
        {% set tests_to_skip = tests_to_skip + " or test_null_space or test_small_sigma2" %}              # [aarch64]
        {% set tests_to_skip = tests_to_skip + " or (TestQR and (delete_f or insert_f or update_f))" %}   # [aarch64]
        {% set tests_to_skip = tests_to_skip + " or (TestLstsq and test_random_overdet)" %}               # [aarch64]
        {% set tests_to_skip = tests_to_skip + " or (test_lapack.py and (" %}                             # [aarch64]
            {% set tests_to_skip = tests_to_skip + " test_pftri or test_pstrf or test_pstf2" %}           # [aarch64]
            {% set tests_to_skip = tests_to_skip + " or test_sfrk_hfrk or TestBlockedQR" %}               # [aarch64]
        {% set tests_to_skip = tests_to_skip + "))" %}                                                    # [aarch64]
        # on the slowest agents, these tests take more than 20min in emulation
        {% set tests_to_skip = tests_to_skip + " or test_all_nograd_minimizers" %}                        # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or test_mixed_threads_processes or test_sf_gh18506" %}   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or test_quad_vec_pool" %}                                # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_lsq_linear and test_large_rank_deficient)" %}   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_iterative and test_precond_inverse)" %}         # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_multiprocess and fft)" %}                       # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestLstsq and test_random_complex_exact)" %}         # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestLevyStable and test_location_scale)" %}          # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestShgoArguments and test_19_parallelization)" %}   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_workers and (TestBrute or TestDogbox or TestLM or TestTRF))" %}                   # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (test_workers and (TestScalarFunction or TestVectorialFunction))" %}                    # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestWorkers and (test_smoke or test_equal_bounds))" %}                                 # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestApproxDerivatives and (test_all or test_scalar_vector))" %}                        # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestApproxDerivatives and (test_vector_vector or test_workers_evaluations))" %}        # [aarch64 or ppc64le]
        {% set tests_to_skip = tests_to_skip + " or (TestDifferentialEvolutionSolver and (test_immediate_updating or test_parallel))" %}    # [aarch64 or ppc64le]
        # tests that run into timeouts (set in scipy test suite) in emulation
        {% set tests_to_skip = tests_to_skip + " or (test_propack and test_examples)" %}            # [aarch64 or ppc64le]
        # hangs on windows for old CPUs: https://github.com/scipy/scipy/issues/23527
        {% set tests_to_skip = tests_to_skip + " or test_variation_ddof" %}                         # [win]
        {% set tests_to_skip = tests_to_skip + " or test_warning_calls_filters" %}                  # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestFBLAS2Simple and test_spr_hpr)" %}         # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestSVD_GESDD and test_crash_1580)" %}         # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestSVD_GESVD and test_crash_1580)" %}         # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestVariation and test_neg_inf_nan)" %}        # [win]
        {% set tests_to_skip = tests_to_skip + " or test_combined_edge_cases" %}                    # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestLstsq and test_random_exact)" %}           # [win]
        {% set tests_to_skip = tests_to_skip + " or (TestLstsq and test_random_complex_exact)" %}   # [win]
        {% set tests_to_skip = tests_to_skip + " or test_more_nan_policy_omit_tests" %}             # [win]
        # show SIMD features (some failures occur depending on presence/absence of e.g. AVX512)
        - python -c "import numpy; numpy.show_config()"
        # tests for ppc64le and aarch64 are run in emulation through QEMU; as this takes
        # much longer, do not run the most heavy-weight tests, i.e. use label='fast'
        {% set label = "'fast'" if (aarch64 or ppc64le) else "'full'" %}
        # for signature of scipy.test see below (note default: label='fast'):
        # https://github.com/scipy/scipy/blob/v1.7.0/scipy/_lib/_testutils.py#L27
        {% set param = "verbose=1, label=" + label + ", tests=None" %}
        {% set extra = "extra_argv=['-k', 'not (" + tests_to_skip + ")', '-nauto', '--timeout=1200', '--durations=50']" %}
        - python -c "import scipy, sys; sys.exit(not scipy.test({{ param }}, {{ extra }}))"

about:
  home: http://www.scipy.org/
  license: BSD-3-Clause
  license_file: LICENSE.txt
  summary: Scientific Library for Python
  description: |
    SciPy is a Python-based ecosystem of open-source software for mathematics,
    science, and engineering.
  doc_url: http://www.scipy.org/docs.html
  dev_url: https://github.com/scipy/scipy

extra:
  recipe-maintainers:
    - jakirkham
    - msarahan
    - rgommers
    - ocefpaf
    - h-vetinari
  feedstock-name: scipy
