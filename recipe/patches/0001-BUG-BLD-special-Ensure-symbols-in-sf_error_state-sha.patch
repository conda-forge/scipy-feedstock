From 001c8edde0061cc4ca4e24a8a928beb6899d36c7 Mon Sep 17 00:00:00 2001
From: Albert Steppi <albert.steppi@gmail.com>
Date: Thu, 13 Jun 2024 03:33:51 -0400
Subject: [PATCH 1/2] BUG/BLD: special: Ensure symbols in `sf_error_state`
 shared library are exported/imported on MSVC (#20937)

* Add compile flag fpp for ifx, not just ifort

* Avoid designated initializers

- This is a C++20 feature which just happens to work in every
supported compiler except MSVC at the moment

* Make sure symbols in shared library are exported/imported on MSVC

Co-authored-by: h-vetinari <h.vetinari@gmx.com>
Co-authored-by: Ralf Gommers <ralf.gommers@gmail.com>
---
 scipy/_build_utils/src/scipy_dll.h | 18 +++++++++++
 scipy/meson.build                  |  2 +-
 scipy/special/_gufuncs.cpp         | 10 +++++--
 scipy/special/_special_ufuncs.cpp  | 10 +++++--
 scipy/special/meson.build          | 48 ++++++++++++++----------------
 scipy/special/sf_error_state.c     |  4 +--
 scipy/special/sf_error_state.h     |  6 ++--
 7 files changed, 63 insertions(+), 35 deletions(-)
 create mode 100644 scipy/_build_utils/src/scipy_dll.h

diff --git a/scipy/_build_utils/src/scipy_dll.h b/scipy/_build_utils/src/scipy_dll.h
new file mode 100644
index 0000000000..5abeee874d
--- /dev/null
+++ b/scipy/_build_utils/src/scipy_dll.h
@@ -0,0 +1,18 @@
+#pragma once
+
+// SCIPY_DLL
+// inspired by https://github.com/abseil/abseil-cpp/blob/20240116.2/absl/base/config.h#L736-L753
+//
+// When building sf_error_state as a DLL, this macro expands to `__declspec(dllexport)`
+// so we can annotate symbols appropriately as being exported. When used in
+// headers consuming a DLL, this macro expands to `__declspec(dllimport)` so
+// that consumers know the symbol is defined inside the DLL. In all other cases,
+// the macro expands to nothing.
+// Note: SCIPY_DLL_{EX,IM}PORTS are set in scipy/special/meson.build
+#if defined(SCIPY_DLL_EXPORTS)
+    #define SCIPY_DLL __declspec(dllexport)
+#elif defined(SCIPY_DLL_IMPORTS)
+    #define SCIPY_DLL __declspec(dllimport)
+#else
+    #define SCIPY_DLL
+#endif
diff --git a/scipy/meson.build b/scipy/meson.build
index 79a16cd5b8..a0857848a2 100644
--- a/scipy/meson.build
+++ b/scipy/meson.build
@@ -422,7 +422,7 @@ fortran_ignore_warnings = ff.get_supported_arguments(
 # Intel Fortran (ifort) does not run the preprocessor by default, if Fortran
 # code uses preprocessor statements, add this compile flag to it.
 _fflag_fpp = []
-if ff.get_id() == 'intel-cl'
+if ff.get_id() in ['intel-cl', 'intel-llvm-cl']
   if is_windows
     _fflag_fpp = ff.get_supported_arguments('/fpp')
   else
diff --git a/scipy/special/_gufuncs.cpp b/scipy/special/_gufuncs.cpp
index 90ee4d69ba..216adf5bb1 100644
--- a/scipy/special/_gufuncs.cpp
+++ b/scipy/special/_gufuncs.cpp
@@ -54,8 +54,14 @@ extern "C" int wrap_PyUFunc_getfperr() { return PyUFunc_getfperr(); }
 
 static PyModuleDef _gufuncs_def = {
     PyModuleDef_HEAD_INIT,
-    .m_name = "_gufuncs",
-    .m_size = -1,
+    "_gufuncs",
+    NULL,
+    -1,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };
 
 PyMODINIT_FUNC PyInit__gufuncs() {
diff --git a/scipy/special/_special_ufuncs.cpp b/scipy/special/_special_ufuncs.cpp
index b9c2dfc067..7e9aa01aca 100644
--- a/scipy/special/_special_ufuncs.cpp
+++ b/scipy/special/_special_ufuncs.cpp
@@ -207,8 +207,14 @@ extern "C" int wrap_PyUFunc_getfperr() { return PyUFunc_getfperr(); }
 
 static PyModuleDef _special_ufuncs_def = {
     PyModuleDef_HEAD_INIT,
-    .m_name = "_special_ufuncs",
-    .m_size = -1,
+    "_special_ufuncs",
+    NULL,
+    -1,
+    NULL,
+    NULL,
+    NULL,
+    NULL,
+    NULL
 };
 
 PyMODINIT_FUNC PyInit__special_ufuncs() {
diff --git a/scipy/special/meson.build b/scipy/special/meson.build
index a52ec928f6..82b813ea85 100644
--- a/scipy/special/meson.build
+++ b/scipy/special/meson.build
@@ -25,14 +25,27 @@ _ufuncs_pxi_pxd_sources = [
   fs.copyfile('_ufuncs_extra_code_common.pxi'),
 ]
 
+if meson.get_compiler('cpp').get_id() in ['msvc', 'clang-cl', 'intel-cl']
+  scipy_export_dll_args = ['-DSCIPY_DLL_EXPORTS']
+  scipy_import_dll_args = ['-DSCIPY_DLL_IMPORTS']
+else
+  scipy_export_dll_args = []
+  scipy_import_dll_args = []
+endif
+
 sf_error_state_lib = shared_library('sf_error_state',
   ['sf_error_state.c'],
   include_directories: ['../_lib', '../_build_utils/src'],
-  cpp_args: ['-DSP_SPECFUN_ERROR'],
+  c_args: scipy_export_dll_args,
   install: true,
   install_dir: py3.get_install_dir() / 'scipy/special',
 )
 
+sf_error_state_dep = declare_dependency(
+  compile_args: ['-DSP_SPECFUN_ERROR'] + scipy_import_dll_args,
+  link_with: sf_error_state_lib,
+)
+
 ufuncs_sources = [
   '_cosine.c',
   'special_wrappers.cpp',
@@ -58,9 +71,7 @@ cdflib_lib = static_library('cdflib',
 py3.extension_module('_special_ufuncs',
   ['_special_ufuncs.cpp', '_special_ufuncs_docs.cpp', 'sf_error.cc'],
   include_directories: ['../_lib', '../_build_utils/src'],
-  cpp_args: ['-DSP_SPECFUN_ERROR'],
-  dependencies: [np_dep],
-  link_with: [sf_error_state_lib],
+  dependencies: [np_dep, sf_error_state_dep],
   link_args: version_link_args,
   install: true,
   subdir: 'scipy/special',
@@ -70,9 +81,7 @@ py3.extension_module('_special_ufuncs',
 py3.extension_module('_gufuncs',
   ['_gufuncs.cpp', '_gufuncs_docs.cpp', 'sf_error.cc'],
   include_directories: ['../_lib', '../_build_utils/src'],
-  cpp_args: ['-DSP_SPECFUN_ERROR'],
-  dependencies: [np_dep],
-  link_with: [sf_error_state_lib],
+  dependencies: [np_dep, sf_error_state_dep],
   link_args: version_link_args,
   install: true,
   subdir: 'scipy/special',
@@ -126,19 +135,16 @@ py3.extension_module('_ufuncs',
     ufuncs_sources,
     uf_cython_gen.process(cython_special[0]),  # _ufuncs.pyx
   ],
-  c_args: [cython_c_args, Wno_maybe_uninitialized],
-  cpp_args: ['-DSP_SPECFUN_ERROR'],
+  c_args: [cython_c_args, Wno_maybe_uninitialized] + scipy_import_dll_args,
   include_directories: ['../_lib', '../_build_utils/src'],
   dependencies: [
     lapack_dep,
     npymath_lib,
     np_dep,
+    sf_error_state_dep,
   ],
   link_args: version_link_args,
-  link_with: [
-    sf_error_state_lib,
-    cdflib_lib
-  ],
+  link_with: cdflib_lib,
   install: true,
   subdir: 'scipy/special',
   install_rpath: '$ORIGIN',
@@ -165,7 +171,6 @@ ufuncs_cxx_cpp_args = [
   cython_cpp_args,
   '-DBOOST_MATH_STANDALONE=1',
   '-DCYTHON_EXTERN_C=extern "C"',
-  '-DSP_SPECFUN_ERROR', # For error handling in special functions.
 ]
 
 py3.extension_module('_ufuncs_cxx',
@@ -176,8 +181,7 @@ py3.extension_module('_ufuncs_cxx',
   include_directories: ['../_lib/boost_math/include', '../_lib',
                         '../_build_utils/src'],
   link_args: version_link_args,
-    link_with: [sf_error_state_lib],
-  dependencies: [np_dep, ellint_dep],
+  dependencies: [np_dep, ellint_dep, sf_error_state_dep],
   install: true,
   subdir: 'scipy/special',
   install_rpath: '$ORIGIN',
@@ -186,11 +190,9 @@ py3.extension_module('_ufuncs_cxx',
 py3.extension_module('_ellip_harm_2',
   [uf_cython_gen.process('_ellip_harm_2.pyx'), 'sf_error.cc'],
   c_args: cython_c_args,
-  cpp_args: ['-DSP_SPECFUN_ERROR'],
   include_directories: ['../_lib', '../_build_utils/src'],
-  link_with: [sf_error_state_lib],
   link_args: version_link_args,
-  dependencies: [lapack_dep, np_dep],
+  dependencies: [lapack_dep, np_dep, sf_error_state_dep],
   install: true,
   subdir: 'scipy/special',
   install_rpath: '$ORIGIN',
@@ -205,14 +207,10 @@ py3.extension_module('cython_special',
     'dd_real_wrappers.cpp'
   ],
   c_args: [cython_c_args, Wno_maybe_uninitialized],
-  cpp_args: ['-DSP_SPECFUN_ERROR'],
   include_directories: ['../_lib', '../_build_utils/src'],
   link_args: version_link_args,
-  dependencies: [np_dep, npymath_lib],
-  link_with: [
-    sf_error_state_lib,
-    cdflib_lib
-  ],
+  dependencies: [np_dep, npymath_lib, sf_error_state_dep],
+  link_with: cdflib_lib,
   install: true,
   subdir: 'scipy/special',
   install_rpath: '$ORIGIN',
diff --git a/scipy/special/sf_error_state.c b/scipy/special/sf_error_state.c
index 1a664170d2..d2c465a213 100644
--- a/scipy/special/sf_error_state.c
+++ b/scipy/special/sf_error_state.c
@@ -19,13 +19,13 @@ static volatile sf_action_t sf_error_actions[] = {
 };
 
 
-void scipy_sf_error_set_action(sf_error_t code, sf_action_t action)
+SCIPY_DLL void scipy_sf_error_set_action(sf_error_t code, sf_action_t action)
 {
     sf_error_actions[(int)code] = action;
 }
 
 
-sf_action_t scipy_sf_error_get_action(sf_error_t code)
+SCIPY_DLL sf_action_t scipy_sf_error_get_action(sf_error_t code)
 {
     return sf_error_actions[(int)code];
 }
diff --git a/scipy/special/sf_error_state.h b/scipy/special/sf_error_state.h
index a4cb563bb2..dbedddcd20 100644
--- a/scipy/special/sf_error_state.h
+++ b/scipy/special/sf_error_state.h
@@ -1,6 +1,6 @@
 #pragma once
 
-
+#include "scipy_dll.h"
 #include "special/error.h"
 
 
@@ -14,9 +14,9 @@ extern "C" {
         SF_ERROR_RAISE        /* Raise on errors */
     } sf_action_t;
     
-    void scipy_sf_error_set_action(sf_error_t code, sf_action_t action);
+    SCIPY_DLL void scipy_sf_error_set_action(sf_error_t code, sf_action_t action);
 
-    sf_action_t scipy_sf_error_get_action(sf_error_t code);
+    SCIPY_DLL sf_action_t scipy_sf_error_get_action(sf_error_t code);
 
 #ifdef __cplusplus
 }
