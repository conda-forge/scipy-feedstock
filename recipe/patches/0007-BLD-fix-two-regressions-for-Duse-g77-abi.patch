From 36b3d3c49103b1ca57234fd399edda5fcc942d10 Mon Sep 17 00:00:00 2001
From: Ralf Gommers <ralf.gommers@gmail.com>
Date: Fri, 5 May 2023 08:49:59 +0200
Subject: [PATCH 7/9] BLD: fix two regressions for `-Duse-g77-abi`

The first was caused by gh-18264 and caused a build issue,
the second was a missing CBLAS issue when building against Netlib BLAS
with this combination of flags:

  python -m build -nwx -C-Dblas=blas -C-Dlapack=lapack -C-Duse-g77-abi=true
  python dev.py build -C-Dblas=blas -C-Dlapack=lapack -C-Duse-g77-abi=true

Closes gh-18371
---
 scipy/_build_utils/src/npy_cblas.h            |  6 ++--
 scipy/_build_utils/src/npy_cblas_base.h       |  6 ++--
 scipy/linalg/meson.build                      | 12 +++----
 scipy/meson.build                             | 36 ++++++++++++++-----
 scipy/sparse/linalg/_eigen/arpack/meson.build |  4 +--
 scipy/sparse/linalg/_isolve/meson.build       |  3 +-
 scipy/sparse/linalg/_propack/meson.build      |  3 +-
 7 files changed, 44 insertions(+), 26 deletions(-)

diff --git a/scipy/_build_utils/src/npy_cblas.h b/scipy/_build_utils/src/npy_cblas.h
index 02961d430..4f0228459 100644
--- a/scipy/_build_utils/src/npy_cblas.h
+++ b/scipy/_build_utils/src/npy_cblas.h
@@ -3,8 +3,8 @@
  * because not all providers of cblas provide cblas.h. For instance, MKL provides
  * mkl_cblas.h and also typedefs the CBLAS_XXX enums.
  */
-#ifndef NUMPY_CORE_SRC_COMMON_NPY_CBLAS_H_
-#define NUMPY_CORE_SRC_COMMON_NPY_CBLAS_H_
+#ifndef _NPY_CBLAS_H_
+#define _NPY_CBLAS_H_
 
 #include <numpy/npy_common.h>
 #include <stddef.h>
@@ -99,4 +99,4 @@ blas_stride(npy_intp stride, unsigned itemsize)
 }
 #endif
 
-#endif  /* NUMPY_CORE_SRC_COMMON_NPY_CBLAS_H_ */
+#endif  /* _NPY_CBLAS_H_ */
diff --git a/scipy/_build_utils/src/npy_cblas_base.h b/scipy/_build_utils/src/npy_cblas_base.h
index 12dfb2e78..c6d33a52f 100644
--- a/scipy/_build_utils/src/npy_cblas_base.h
+++ b/scipy/_build_utils/src/npy_cblas_base.h
@@ -9,8 +9,8 @@
  * Prototypes for level 1 BLAS functions (complex are recast as routines)
  * ===========================================================================
  */
-#ifndef NUMPY_CORE_SRC_COMMON_NPY_CBLAS_BASE_H_
-#define NUMPY_CORE_SRC_COMMON_NPY_CBLAS_BASE_H_
+#ifndef _NPY_CBLAS_BASE_H_
+#define _NPY_CBLAS_BASE_H_
 
 float  BLASNAME(cblas_sdsdot)(const BLASINT N, const float alpha, const float *X,
                               const BLASINT incX, const float *Y, const BLASINT incY);
@@ -559,4 +559,4 @@ void BLASNAME(cblas_zher2k)(const enum CBLAS_ORDER Order, const enum CBLAS_UPLO
 
 void BLASNAME(cblas_xerbla)(BLASINT p, const char *rout, const char *form, ...);
 
-#endif  /* NUMPY_CORE_SRC_COMMON_NPY_CBLAS_BASE_H_ */
+#endif  /* _NPY_CBLAS_BASE_H_ */
diff --git a/scipy/linalg/meson.build b/scipy/linalg/meson.build
index bf1b74e7f..5628e6cd6 100644
--- a/scipy/linalg/meson.build
+++ b/scipy/linalg/meson.build
@@ -51,10 +51,10 @@ fblas_module = custom_target('fblas_module',
 # the float/double routines are in BLAS while the complex routines are in
 # LAPACK - we have historically put these in `_fblas`.
 py3.extension_module('_fblas',
-  [fblas_module, g77_abi_wrappers],
+  fblas_module,
   c_args: numpy_nodepr_api,
   link_args: version_link_args,
-  dependencies: [blas, lapack, fortranobject_dep],
+  dependencies: [lapack, blas, fortranobject_dep, g77_abi_wrappers],
   install: true,
   link_language: 'fortran',
   subdir: 'scipy/linalg'
@@ -71,10 +71,10 @@ flapack_module = custom_target('flapack_module',
 # Note that -Wno-empty-body is Clang-specific and comes from `callstatement`s
 # in flapack_other.pyf.src
 py3.extension_module('_flapack',
-  [flapack_module, g77_abi_wrappers],
+  flapack_module,
   c_args: [numpy_nodepr_api, Wno_empty_body],
   link_args: version_link_args,
-  dependencies: [lapack, fortranobject_dep],
+  dependencies: [lapack, blas, fortranobject_dep, g77_abi_wrappers],
   install: true,
   link_language: 'fortran',
   subdir: 'scipy/linalg'
@@ -186,8 +186,8 @@ fwrappers = static_library('fwrappers',
     cython_linalg[5],
     cython_linalg[6],
     cython_linalg[7],
-    g77_abi_wrappers
-  ]
+  ],
+  dependencies: g77_abi_wrappers,
 )
 
 cython_blas = py3.extension_module('cython_blas',
diff --git a/scipy/meson.build b/scipy/meson.build
index 6de5aea26..299d8bbfc 100644
--- a/scipy/meson.build
+++ b/scipy/meson.build
@@ -180,13 +180,26 @@ lapack_name = get_option('lapack')
 # pkg-config uses a lower-case name while CMake uses a capitalized name, so try
 # that too to make the fallback detection with CMake work
 if blas_name == 'openblas'
-  blas_name = ['openblas', 'OpenBLAS']
+  blas = dependency(['openblas', 'OpenBLAS'])
+else
+  blas = dependency(blas_name)
+endif
+if blas_name == 'blas'
+  # Netlib BLAS has a separate `libcblas.so` which we use directly in the g77
+  # ABI wrappers, so detect it and error out if we cannot find it.
+  # In the future, this should be done automatically for:
+  #   `dependency('blas', modules: cblas)`
+  # see https://github.com/mesonbuild/meson/pull/10921.
+  cblas = dependency('cblas')
+else
+  cblas = []
 endif
+
 if lapack_name == 'openblas'
-  lapack_name = ['openblas', 'OpenBLAS']
+  lapack = dependency(['openblas', 'OpenBLAS'])
+else
+  lapack = dependency(lapack_name)
 endif
-blas = dependency(blas_name)
-lapack = dependency(lapack_name)
 
 # TODO: Add `pybind11` when available as a dependency
 dependency_map = {
@@ -202,12 +215,17 @@ uses_mkl = blas.name().to_lower().startswith('mkl') or lapack.name().to_lower().
 uses_accelerate = blas.name().to_lower().startswith('accelerate') or lapack.name().to_lower().startswith('accelerate')
 use_g77_abi = uses_mkl or uses_accelerate or get_option('use-g77-abi')
 if use_g77_abi
-  g77_abi_wrappers = files([
-    '_build_utils/src/wrap_g77_abi_f.f',
-    '_build_utils/src/wrap_g77_abi_c.c'
-    ])
+  g77_abi_wrappers = declare_dependency(
+    sources:
+      [
+        '_build_utils/src/wrap_g77_abi_f.f',
+        '_build_utils/src/wrap_g77_abi_c.c'
+      ],
+    include_directories: inc_np,
+    dependencies: [py3_dep, cblas],
+  )
 else
-  g77_abi_wrappers = files('_build_utils/src/wrap_dummy_g77_abi.f')
+  g77_abi_wrappers = declare_dependency(sources: ['_build_utils/src/wrap_dummy_g77_abi.f'])
 endif
 
 scipy_dir = py3.get_install_dir() / 'scipy'
diff --git a/scipy/sparse/linalg/_eigen/arpack/meson.build b/scipy/sparse/linalg/_eigen/arpack/meson.build
index ce8125b46..73f34c6d1 100644
--- a/scipy/sparse/linalg/_eigen/arpack/meson.build
+++ b/scipy/sparse/linalg/_eigen/arpack/meson.build
@@ -98,11 +98,11 @@ arpack_module = custom_target('arpack_module',
 )
 
 _arpack = py3.extension_module('_arpack',
-  [arpack_module, g77_abi_wrappers],
+  arpack_module,
   c_args: numpy_nodepr_api,
   link_with: [arpack_lib],
   link_args: version_link_args,
-  dependencies: [lapack, fortranobject_dep],
+  dependencies: [lapack, blas, fortranobject_dep, g77_abi_wrappers],
   install: true,
   link_language: 'fortran',
   subdir: 'scipy/sparse/linalg/_eigen/arpack'
diff --git a/scipy/sparse/linalg/_isolve/meson.build b/scipy/sparse/linalg/_isolve/meson.build
index 70a9220da..be63a18fc 100644
--- a/scipy/sparse/linalg/_isolve/meson.build
+++ b/scipy/sparse/linalg/_isolve/meson.build
@@ -61,7 +61,6 @@ _iterative_module = custom_target('_iterative_module',
 _iterative = py3.extension_module('_iterative',
   [
     _iterative_module,
-    g77_abi_wrappers,
     methods_f_0,
     methods_f_1,
     methods_f_2,
@@ -73,7 +72,7 @@ _iterative = py3.extension_module('_iterative',
   c_args: numpy_nodepr_api,
   fortran_args: fortran_ignore_warnings,
   link_args: version_link_args,
-  dependencies: [lapack, fortranobject_dep],
+  dependencies: [lapack, blas, fortranobject_dep, g77_abi_wrappers],
   install: true,
   link_language: 'fortran',
   subdir: 'scipy/sparse/linalg/_isolve'
diff --git a/scipy/sparse/linalg/_propack/meson.build b/scipy/sparse/linalg/_propack/meson.build
index 70e098241..b201691a6 100644
--- a/scipy/sparse/linalg/_propack/meson.build
+++ b/scipy/sparse/linalg/_propack/meson.build
@@ -96,13 +96,14 @@ foreach ele: elements
   # Note that in setup.py, adding `g77_abi_wrappers` is skipped for 32-bit
   # architectures (stated reason: "it blows up").
   propack_lib = static_library('lib_' + ele[0],
-    [ele[1], g77_abi_wrappers],
+    ele[1],
     c_args: cargs_propack,
     fortran_args: [
       fortran_ignore_warnings, 
       _fflag_Wno_intrinsic_shadow,
       _fflag_Wno_uninitialized,
     ],
+    dependencies: g77_abi_wrappers,
   )
 
   propack_module = custom_target('propack_module' + ele[0],
